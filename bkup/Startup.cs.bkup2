using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.IdentityModel.Tokens;

namespace CustomReverseProxy
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
		services.AddControllers();
		
		services.AddAuthentication(options =>
        	{
            		options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            		options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        	}).AddJwtBearer(options =>
        	{	
            		options.Authority = "https://dev-vrk5vwulx3wfsclz.us.auth0.com/";
            		options.Audience = "https://test";
        	});

		services.AddAuthorization();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseMiddleware<ReverseProxyMiddleware>();

	    app.UseRouting();
	    app.UseAuthentication();
	    app.UseAuthorization();
	    app.UseEndpoints(endpoints => 
	    {
	    	endpoints.MapControllers();
	    });

	    app.Run(async (context) =>
		{
			await context.Response.WriteAsync("<a href='/googleforms/d/e/1FAIpQLSdJwmxHIl_OCh-CI1J68G1EVSr9hKaYFLh3dHh8TLnxjxCJWw/viewform?hl=en'>Register to receive a T-shirt</a>");
		});

            /*app.UseEndpoints(endpoints =>
            {
                endpoints.MapGet("/", async context =>
                {
                    await context.Response.WriteAsync("Hello World!");
                });
            });
	    */
        }
    }
}
